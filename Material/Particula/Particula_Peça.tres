[gd_resource type="VisualShader" load_steps=10 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
output_port_for_preview = 0
input_name = "uv2"

[sub_resource type="VisualShaderNodeColorConstant" id=2]
constant = Color( 0.664531, 0.156528, 0.156528, 1 )

[sub_resource type="VisualShaderNodeColorConstant" id=3]
constant = Color( 0.165108, 0.507985, 0.840312, 1 )

[sub_resource type="VisualShaderNodeIf" id=4]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.35, 2, 1e-05, 3, Vector3( 0, 0, 0 ), 4, Vector3( 0, 0, 0 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeScalarUniform" id=5]
uniform_name = "ScalarUniform"

[sub_resource type="VisualShaderNodeVec3Constant" id=6]
constant = Vector3( 0.3, 0.2, 0.2 )

[sub_resource type="VisualShaderNodeColorOp" id=7]
operator = 4

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "specular"

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "binormal"

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform float ScalarUniform;



void vertex() {
// Input:2
	vec3 n_out2p0 = BINORMAL;

// Output:0
	NORMAL = n_out2p0;
	UV2 = n_out2p0.xy;

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV2, 0.0);

// Color:5
	vec3 n_out5p0 = vec3(0.165108, 0.507985, 0.840312);
	float n_out5p1 = 1.000000;

// Color:4
	vec3 n_out4p0 = vec3(0.664531, 0.156528, 0.156528);
	float n_out4p1 = 1.000000;

// If:6
	float n_in6p1 = 0.35000;
	float n_in6p2 = 0.00001;
	vec3 n_in6p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out6p0;
	if(abs(dot(n_out3p0, vec3(0.333333, 0.333333, 0.333333)) - n_in6p1) < n_in6p2)
	{
		n_out6p0 = n_in6p3;
	}
	else if(dot(n_out3p0, vec3(0.333333, 0.333333, 0.333333)) < n_in6p1)
	{
		n_out6p0 = n_out4p0;
	}
	else
	{
		n_out6p0 = n_out5p0;
	}

// Output:0
	ALBEDO = n_out6p0;

}

void light() {
// ScalarUniform:2
	float n_out2p0 = ScalarUniform;

// Vector:3
	vec3 n_out3p0 = vec3(0.300000, 0.200000, 0.200000);

// Input:5
	vec3 n_out5p0 = SPECULAR_LIGHT;

// ColorOp:4
	vec3 n_out4p0;
	{
		float base = n_out3p0.x;
		float blend = n_out5p0.x;
		if (base < 0.5) {
			n_out4p0.x = 2.0 * base * blend;
		} else {
			n_out4p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out3p0.y;
		float blend = n_out5p0.y;
		if (base < 0.5) {
			n_out4p0.y = 2.0 * base * blend;
		} else {
			n_out4p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out3p0.z;
		float blend = n_out5p0.z;
		if (base < 0.5) {
			n_out4p0.z = 2.0 * base * blend;
		} else {
			n_out4p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// Output:0
	DIFFUSE_LIGHT = vec3(n_out2p0);
	SPECULAR_LIGHT = n_out4p0;

}
"
graph_offset = Vector2( -210.3, 20.13 )
nodes/vertex/2/node = SubResource( 9 )
nodes/vertex/2/position = Vector2( 110.7, 219.13 )
nodes/vertex/connections = PoolIntArray( 2, 0, 0, 5, 2, 0, 0, 1 )
nodes/fragment/3/node = SubResource( 1 )
nodes/fragment/3/position = Vector2( -160, 20 )
nodes/fragment/4/node = SubResource( 2 )
nodes/fragment/4/position = Vector2( -220, 420 )
nodes/fragment/5/node = SubResource( 3 )
nodes/fragment/5/position = Vector2( -260, 240 )
nodes/fragment/6/node = SubResource( 4 )
nodes/fragment/6/position = Vector2( 88.14, 252.68 )
nodes/fragment/connections = PoolIntArray( 6, 0, 0, 0, 3, 0, 6, 0, 4, 0, 6, 5, 5, 0, 6, 4 )
nodes/light/2/node = SubResource( 5 )
nodes/light/2/position = Vector2( 136.7, 159.13 )
nodes/light/3/node = SubResource( 6 )
nodes/light/3/position = Vector2( -180, 240 )
nodes/light/4/node = SubResource( 7 )
nodes/light/4/position = Vector2( 160, 280 )
nodes/light/5/node = SubResource( 8 )
nodes/light/5/position = Vector2( -80, 380 )
nodes/light/connections = PoolIntArray( 2, 0, 0, 0, 3, 0, 4, 0, 5, 0, 4, 1, 4, 0, 0, 1 )
